input createInfoInput {
  data: InfoInput
}

type createInfoPayload {
  info: Info
}

input createPageInput {
  data: PageInput
}

type createPagePayload {
  page: Page
}

input createPostInput {
  data: PostInput
}

type createPostPayload {
  post: Post
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteInfoInput {
  where: InputID
}

type deleteInfoPayload {
  info: Info
}

input deletePageInput {
  where: InputID
}

type deletePagePayload {
  page: Page
}

input deletePostInput {
  where: InputID
}

type deletePostPayload {
  post: Post
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editInfoInput {
  phone: String
  email: String
}

input editPageInput {
  title_ru: String
  title_en: String
  slug: String
  seotitle: String
  seodescription: String
  seokeywords: String
  subtitle_ru: String
  subtitle_en: String
  content_ru: String
  content_en: String
}

input editPostInput {
  title_ru: String
  title_en: String
  slug: String
  seotitle: String
  seodescription: String
  seokeywords: String
  content_ru: String
  content_en: String
  image: ID
  previewimage: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

type Info {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  phone: String
  email: String
}

type InfoAggregator {
  count: Int
}

type InfoConnection {
  values: [Info]
  groupBy: InfoGroupBy
  aggregate: InfoAggregator
}

type InfoConnection_id {
  key: ID
  connection: InfoConnection
}

type InfoConnectionCreatedAt {
  key: DateTime
  connection: InfoConnection
}

type InfoConnectionEmail {
  key: String
  connection: InfoConnection
}

type InfoConnectionPhone {
  key: String
  connection: InfoConnection
}

type InfoConnectionUpdatedAt {
  key: DateTime
  connection: InfoConnection
}

type InfoGroupBy {
  _id: [InfoConnection_id]
  createdAt: [InfoConnectionCreatedAt]
  updatedAt: [InfoConnectionUpdatedAt]
  phone: [InfoConnectionPhone]
  email: [InfoConnectionEmail]
}

input InfoInput {
  phone: String
  email: String
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Info | createInfoPayload | updateInfoPayload | deleteInfoPayload | InfoConnection | InfoAggregator | InfoGroupBy | InfoConnection_id | InfoConnectionCreatedAt | InfoConnectionUpdatedAt | InfoConnectionPhone | InfoConnectionEmail | Page | createPagePayload | updatePagePayload | deletePagePayload | PageConnection | PageAggregator | PageGroupBy | PageConnection_id | PageConnectionCreatedAt | PageConnectionUpdatedAt | PageConnectionTitle_ru | PageConnectionTitle_en | PageConnectionSlug | PageConnectionSeotitle | PageConnectionSeodescription | PageConnectionSeokeywords | PageConnectionSubtitle_ru | PageConnectionSubtitle_en | PageConnectionContent_ru | PageConnectionContent_en | Post | createPostPayload | updatePostPayload | deletePostPayload | PostConnection | PostAggregator | PostGroupBy | PostConnection_id | PostConnectionCreatedAt | PostConnectionUpdatedAt | PostConnectionTitle_ru | PostConnectionTitle_en | PostConnectionSlug | PostConnectionSeotitle | PostConnectionSeodescription | PostConnectionSeokeywords | PostConnectionContent_ru | PostConnectionContent_en | PostConnectionImage | PostConnectionPreviewimage | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createInfo(input: createInfoInput): createInfoPayload
  updateInfo(input: updateInfoInput): updateInfoPayload
  deleteInfo(input: deleteInfoInput): deleteInfoPayload
  createPage(input: createPageInput): createPagePayload
  updatePage(input: updatePageInput): updatePagePayload
  deletePage(input: deletePageInput): deletePagePayload
  createPost(input: createPostInput): createPostPayload
  updatePost(input: updatePostInput): updatePostPayload
  deletePost(input: deletePostInput): deletePostPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Page {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title_ru: String!
  title_en: String!
  slug: String!
  seotitle: String
  seodescription: String
  seokeywords: String
  subtitle_ru: String
  subtitle_en: String
  content_ru: String
  content_en: String
}

type PageAggregator {
  count: Int
}

type PageConnection {
  values: [Page]
  groupBy: PageGroupBy
  aggregate: PageAggregator
}

type PageConnection_id {
  key: ID
  connection: PageConnection
}

type PageConnectionContent_en {
  key: String
  connection: PageConnection
}

type PageConnectionContent_ru {
  key: String
  connection: PageConnection
}

type PageConnectionCreatedAt {
  key: DateTime
  connection: PageConnection
}

type PageConnectionSeodescription {
  key: String
  connection: PageConnection
}

type PageConnectionSeokeywords {
  key: String
  connection: PageConnection
}

type PageConnectionSeotitle {
  key: String
  connection: PageConnection
}

type PageConnectionSlug {
  key: String
  connection: PageConnection
}

type PageConnectionSubtitle_en {
  key: String
  connection: PageConnection
}

type PageConnectionSubtitle_ru {
  key: String
  connection: PageConnection
}

type PageConnectionTitle_en {
  key: String
  connection: PageConnection
}

type PageConnectionTitle_ru {
  key: String
  connection: PageConnection
}

type PageConnectionUpdatedAt {
  key: DateTime
  connection: PageConnection
}

type PageGroupBy {
  _id: [PageConnection_id]
  createdAt: [PageConnectionCreatedAt]
  updatedAt: [PageConnectionUpdatedAt]
  title_ru: [PageConnectionTitle_ru]
  title_en: [PageConnectionTitle_en]
  slug: [PageConnectionSlug]
  seotitle: [PageConnectionSeotitle]
  seodescription: [PageConnectionSeodescription]
  seokeywords: [PageConnectionSeokeywords]
  subtitle_ru: [PageConnectionSubtitle_ru]
  subtitle_en: [PageConnectionSubtitle_en]
  content_ru: [PageConnectionContent_ru]
  content_en: [PageConnectionContent_en]
}

input PageInput {
  title_ru: String!
  title_en: String!
  slug: String!
  seotitle: String
  seodescription: String
  seokeywords: String
  subtitle_ru: String
  subtitle_en: String
  content_ru: String
  content_en: String
}

type Post {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title_ru: String!
  title_en: String!
  slug: String!
  seotitle: String
  seodescription: String
  seokeywords: String
  content_ru: String
  content_en: String
  image: UploadFile
  previewimage: UploadFile
}

type PostAggregator {
  count: Int
}

type PostConnection {
  values: [Post]
  groupBy: PostGroupBy
  aggregate: PostAggregator
}

type PostConnection_id {
  key: ID
  connection: PostConnection
}

type PostConnectionContent_en {
  key: String
  connection: PostConnection
}

type PostConnectionContent_ru {
  key: String
  connection: PostConnection
}

type PostConnectionCreatedAt {
  key: DateTime
  connection: PostConnection
}

type PostConnectionImage {
  key: ID
  connection: PostConnection
}

type PostConnectionPreviewimage {
  key: ID
  connection: PostConnection
}

type PostConnectionSeodescription {
  key: String
  connection: PostConnection
}

type PostConnectionSeokeywords {
  key: String
  connection: PostConnection
}

type PostConnectionSeotitle {
  key: String
  connection: PostConnection
}

type PostConnectionSlug {
  key: String
  connection: PostConnection
}

type PostConnectionTitle_en {
  key: String
  connection: PostConnection
}

type PostConnectionTitle_ru {
  key: String
  connection: PostConnection
}

type PostConnectionUpdatedAt {
  key: DateTime
  connection: PostConnection
}

type PostGroupBy {
  _id: [PostConnection_id]
  createdAt: [PostConnectionCreatedAt]
  updatedAt: [PostConnectionUpdatedAt]
  title_ru: [PostConnectionTitle_ru]
  title_en: [PostConnectionTitle_en]
  slug: [PostConnectionSlug]
  seotitle: [PostConnectionSeotitle]
  seodescription: [PostConnectionSeodescription]
  seokeywords: [PostConnectionSeokeywords]
  content_ru: [PostConnectionContent_ru]
  content_en: [PostConnectionContent_en]
  image: [PostConnectionImage]
  previewimage: [PostConnectionPreviewimage]
}

input PostInput {
  title_ru: String!
  title_en: String!
  slug: String!
  seotitle: String
  seodescription: String
  seokeywords: String
  content_ru: String
  content_en: String
  image: ID
  previewimage: ID
}

type Query {
  info(id: ID!): Info
  infos(sort: String, limit: Int, start: Int, where: JSON): [Info]
  infosConnection(sort: String, limit: Int, start: Int, where: JSON): InfoConnection
  page(id: ID!): Page
  pages(sort: String, limit: Int, start: Int, where: JSON): [Page]
  pagesConnection(sort: String, limit: Int, start: Int, where: JSON): PageConnection
  post(id: ID!): Post
  posts(sort: String, limit: Int, start: Int, where: JSON): [Post]
  postsConnection(sort: String, limit: Int, start: Int, where: JSON): PostConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateInfoInput {
  where: InputID
  data: editInfoInput
}

type updateInfoPayload {
  info: Info
}

input updatePageInput {
  where: InputID
  data: editPageInput
}

type updatePagePayload {
  page: Page
}

input updatePostInput {
  where: InputID
  data: editPostInput
}

type updatePostPayload {
  post: Post
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
