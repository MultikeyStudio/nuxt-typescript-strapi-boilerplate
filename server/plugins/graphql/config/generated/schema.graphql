input createInfoInput {
  data: InfoInput
}

type createInfoPayload {
  info: Info
}

input createPageInput {
  data: PageInput
}

type createPagePayload {
  page: Page
}

input createPostInput {
  data: PostInput
}

type createPostPayload {
  post: Post
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteInfoInput {
  where: InputID
}

type deleteInfoPayload {
  info: Info
}

input deletePageInput {
  where: InputID
}

type deletePagePayload {
  page: Page
}

input deletePostInput {
  where: InputID
}

type deletePostPayload {
  post: Post
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editInfoInput {
  address_ru: String
  address_en: String
  addresslink: String
  phone: String
  email: String
  vkontakte: String
  facebook: String
  instagram: String
}

input editPageInput {
  title_ru: String
  title_en: String
  slug: String
  seotitle: String
  seodescription: String
  seokeywords: String
  content_ru: String
  content_en: String
}

input editPostInput {
  title_ru: String
  title_en: String
  slug: String
  seotitle: String
  seodescription: String
  seokeywords: String
  content_ru: String
  content_en: String
  image: ID
  previewImage: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

type Info {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  address_ru: String
  address_en: String
  addresslink: String
  phone: String
  email: String
  vkontakte: String
  facebook: String
  instagram: String
}

input InfoInput {
  address_ru: String
  address_en: String
  addresslink: String
  phone: String
  email: String
  vkontakte: String
  facebook: String
  instagram: String
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Info | createInfoPayload | updateInfoPayload | deleteInfoPayload | Page | createPagePayload | updatePagePayload | deletePagePayload | Post | createPostPayload | updatePostPayload | deletePostPayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createInfo(input: createInfoInput): createInfoPayload
  updateInfo(input: updateInfoInput): updateInfoPayload
  deleteInfo(input: deleteInfoInput): deleteInfoPayload
  createPage(input: createPageInput): createPagePayload
  updatePage(input: updatePageInput): updatePagePayload
  deletePage(input: deletePageInput): deletePagePayload
  createPost(input: createPostInput): createPostPayload
  updatePost(input: updatePostInput): updatePostPayload
  deletePost(input: deletePostInput): deletePostPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

"""Страницы проекта"""
type Page {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title_ru: String!
  title_en: String!
  slug: String!
  seotitle: String
  seodescription: String
  seokeywords: String
  content_ru: String
  content_en: String
}

input PageInput {
  title_ru: String!
  title_en: String!
  slug: String!
  seotitle: String
  seodescription: String
  seokeywords: String
  content_ru: String
  content_en: String
}

type Post {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title_ru: String
  title_en: String
  slug: String
  seotitle: String
  seodescription: String
  seokeywords: String
  content_ru: String
  content_en: String
  image: UploadFile
  previewImage: UploadFile
}

input PostInput {
  title_ru: String
  title_en: String
  slug: String
  seotitle: String
  seodescription: String
  seokeywords: String
  content_ru: String
  content_en: String
  image: ID
  previewImage: ID
}

type Query {
  info(id: ID!): Info
  infos(sort: String, limit: Int, start: Int, where: JSON): [Info]
  page(id: ID!): Page
  pages(sort: String, limit: Int, start: Int, where: JSON): [Page]
  post(id: ID!): Post
  posts(sort: String, limit: Int, start: Int, where: JSON): [Post]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateInfoInput {
  where: InputID
  data: editInfoInput
}

type updateInfoPayload {
  info: Info
}

input updatePageInput {
  where: InputID
  data: editPageInput
}

type updatePagePayload {
  page: Page
}

input updatePostInput {
  where: InputID
  data: editPostInput
}

type updatePostPayload {
  post: Post
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsUser {
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}
